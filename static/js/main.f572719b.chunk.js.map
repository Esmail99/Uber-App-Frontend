{"version":3,"sources":["components/Title.js","components/Form.js","components/Drivers.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","data-letter","Form","onFirstInputChange","onSecondInputChange","onFormSubmit","onSubmit","id","onChange","type","step","min","max","placeholder","required","style","outline","value","driversList","App","event","setState","firstInput","target","secondInput","preventDefault","didFirstSearch","fetch","state","then","response","json","drivers","catch","err","console","log","this","map","driver","index","key","name","rate","Math","floor","dist","calculated","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f572719b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Title.css'\r\n\r\nconst Title = () => {\r\n    return(\r\n        <div className='foo'>\r\n          <span className='letter title' data-letter=\"UBER\">UBER</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nconst Form = ({onFirstInputChange,onSecondInputChange,onFormSubmit}) => {\r\n    return(\r\n        <div className=''>\r\n            <article className=\"center mw5 mw6-ns hidden mv4\">\r\n                <main className=\"pt4 pb4\">\r\n                    <form className=\"measure\" onSubmit={onFormSubmit}>\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"tc f3 fw6 ph0 mh0\">Request for a driver , Enter your location!</legend>\r\n                            <div className=\"mt3 ml4\">\r\n                                <label className=\"fw6 lh-copy f4\">Enter your x-axis coordinates: </label>\r\n                                <input \r\n                                    onChange={onFirstInputChange}\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-30 ma2\" \r\n                                    type=\"number\" \r\n                                    step='0.1'\r\n                                    min='0'\r\n                                    max='50'\r\n                                    placeholder='Example: 8'\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div className=\"mv3 ml4\">\r\n                                <label className=\"fw6 lh-copy f4\">Enter your y-axis coordinates :</label>\r\n                                <input \r\n                                    onChange={onSecondInputChange}\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-30 ma2\" \r\n                                    type=\"number\" \r\n                                    step='0.1'\r\n                                    min='0'\r\n                                    max='50'\r\n                                    placeholder='Example: 34' \r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"tr mr4\">\r\n                            <input \r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f4 dib br4\" \r\n                                style={{outline: 'none'}}\r\n                                type=\"submit\" \r\n                                value=\"FIND DRIVERS NEARBY\" \r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            </article>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Drivers.css'\r\n\r\nconst Form = ({driversList}) => {\r\n    return(\r\n        <div className='tc'>\r\n            <ul>\r\n                <li className='mainLi'>\r\n                    <span className='name white'>Name</span>\r\n                    <span className='rate white'>Rate</span>\r\n                    <span className='dist white'>distance</span>\r\n                </li>\r\n                {driversList}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Drivers from './components/Drivers';\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      firstInput: '',\n      secondInput: '',\n      drivers: [],\n      didFirstSearch: false\n    }\n  }\n\n  onFirstInputChange = (event) => {\n    this.setState({firstInput: event.target.value})\n  }\n\n  onSecondInputChange = (event) => {\n    this.setState({secondInput: event.target.value})\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n    this.setState({didFirstSearch: true});\n    fetch(`https://thawing-river-53139.herokuapp.com/drivers?x=${this.state.firstInput}&y=${this.state.secondInput}`)\n    .then(response => response.json())\n    .then(drivers => this.setState({drivers: drivers}))\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    let driversList = this.state.drivers;\n    driversList = driversList.map((driver,index) => {\n      return(\n        <li key={index}>\n          <span className='name'>{driver.name}</span>\n          <span className='rate'>{driver.rate}</span>\n          <span className='dist'>{Math.floor(driver.dist.calculated/1000)} m</span>\n        </li>\n      )\n    })\n\n    return (\n      <div>\n        <Title />\n        <div className='mw7-ns center pt1 pb1 br4 app-container'>\n          <Form \n            onFirstInputChange={this.onFirstInputChange} \n            onSecondInputChange={this.onSecondInputChange} \n            onFormSubmit={this.onFormSubmit}\n          />\n          {\n            this.state.didFirstSearch\n            ? (\n                driversList.length\n                ? <Drivers driversList={driversList} />\n                : <h2 className='tc'>Sorry, there is no availabe drivers at this location!</h2>\n              )\n            : <p></p>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}